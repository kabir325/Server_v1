# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import load_balancer_pb2 as load__balancer__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in load_balancer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoadBalancerStub(object):
    """Service for load balancer communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/loadbalancer.LoadBalancer/RegisterClient',
                request_serializer=load__balancer__pb2.ClientInfo.SerializeToString,
                response_deserializer=load__balancer__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.GetSystemSpecs = channel.unary_unary(
                '/loadbalancer.LoadBalancer/GetSystemSpecs',
                request_serializer=load__balancer__pb2.Empty.SerializeToString,
                response_deserializer=load__balancer__pb2.SystemSpecs.FromString,
                _registered_method=True)
        self.SubmitTask = channel.unary_unary(
                '/loadbalancer.LoadBalancer/SubmitTask',
                request_serializer=load__balancer__pb2.Task.SerializeToString,
                response_deserializer=load__balancer__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/loadbalancer.LoadBalancer/GetTaskStatus',
                request_serializer=load__balancer__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.TaskStatusResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/loadbalancer.LoadBalancer/HealthCheck',
                request_serializer=load__balancer__pb2.Empty.SerializeToString,
                response_deserializer=load__balancer__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.DeployModel = channel.unary_unary(
                '/loadbalancer.LoadBalancer/DeployModel',
                request_serializer=load__balancer__pb2.ModelDeploymentRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.ModelDeploymentResponse.FromString,
                _registered_method=True)
        self.GetAvailableModels = channel.unary_unary(
                '/loadbalancer.LoadBalancer/GetAvailableModels',
                request_serializer=load__balancer__pb2.Empty.SerializeToString,
                response_deserializer=load__balancer__pb2.AvailableModelsResponse.FromString,
                _registered_method=True)
        self.ProcessAIRequest = channel.unary_unary(
                '/loadbalancer.LoadBalancer/ProcessAIRequest',
                request_serializer=load__balancer__pb2.AIRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.AIResponse.FromString,
                _registered_method=True)
        self.DeployContainer = channel.unary_unary(
                '/loadbalancer.LoadBalancer/DeployContainer',
                request_serializer=load__balancer__pb2.ContainerDeploymentRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.ContainerDeploymentResponse.FromString,
                _registered_method=True)
        self.GetContainerStatus = channel.unary_unary(
                '/loadbalancer.LoadBalancer/GetContainerStatus',
                request_serializer=load__balancer__pb2.ContainerStatusRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.ContainerStatusResponse.FromString,
                _registered_method=True)
        self.StopContainer = channel.unary_unary(
                '/loadbalancer.LoadBalancer/StopContainer',
                request_serializer=load__balancer__pb2.ContainerStopRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.ContainerStopResponse.FromString,
                _registered_method=True)
        self.ProcessSensorData = channel.unary_unary(
                '/loadbalancer.LoadBalancer/ProcessSensorData',
                request_serializer=load__balancer__pb2.SensorDataRequest.SerializeToString,
                response_deserializer=load__balancer__pb2.SensorDataResponse.FromString,
                _registered_method=True)
        self.GetConnectedClients = channel.unary_unary(
                '/loadbalancer.LoadBalancer/GetConnectedClients',
                request_serializer=load__balancer__pb2.Empty.SerializeToString,
                response_deserializer=load__balancer__pb2.ConnectedClientsResponse.FromString,
                _registered_method=True)


class LoadBalancerServicer(object):
    """Service for load balancer communication
    """

    def RegisterClient(self, request, context):
        """Register a client and get its specs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemSpecs(self, request, context):
        """Get system specifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTask(self, request, context):
        """Submit a task for execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Get task status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployModel(self, request, context):
        """AI Model Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessAIRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployContainer(self, request, context):
        """Docker Container Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContainerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessSensorData(self, request, context):
        """Sensor Data Integration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectedClients(self, request, context):
        """Get connected clients information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoadBalancerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=load__balancer__pb2.ClientInfo.FromString,
                    response_serializer=load__balancer__pb2.RegistrationResponse.SerializeToString,
            ),
            'GetSystemSpecs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemSpecs,
                    request_deserializer=load__balancer__pb2.Empty.FromString,
                    response_serializer=load__balancer__pb2.SystemSpecs.SerializeToString,
            ),
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=load__balancer__pb2.Task.FromString,
                    response_serializer=load__balancer__pb2.TaskResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=load__balancer__pb2.TaskStatusRequest.FromString,
                    response_serializer=load__balancer__pb2.TaskStatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=load__balancer__pb2.Empty.FromString,
                    response_serializer=load__balancer__pb2.HealthResponse.SerializeToString,
            ),
            'DeployModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployModel,
                    request_deserializer=load__balancer__pb2.ModelDeploymentRequest.FromString,
                    response_serializer=load__balancer__pb2.ModelDeploymentResponse.SerializeToString,
            ),
            'GetAvailableModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableModels,
                    request_deserializer=load__balancer__pb2.Empty.FromString,
                    response_serializer=load__balancer__pb2.AvailableModelsResponse.SerializeToString,
            ),
            'ProcessAIRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessAIRequest,
                    request_deserializer=load__balancer__pb2.AIRequest.FromString,
                    response_serializer=load__balancer__pb2.AIResponse.SerializeToString,
            ),
            'DeployContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployContainer,
                    request_deserializer=load__balancer__pb2.ContainerDeploymentRequest.FromString,
                    response_serializer=load__balancer__pb2.ContainerDeploymentResponse.SerializeToString,
            ),
            'GetContainerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContainerStatus,
                    request_deserializer=load__balancer__pb2.ContainerStatusRequest.FromString,
                    response_serializer=load__balancer__pb2.ContainerStatusResponse.SerializeToString,
            ),
            'StopContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.StopContainer,
                    request_deserializer=load__balancer__pb2.ContainerStopRequest.FromString,
                    response_serializer=load__balancer__pb2.ContainerStopResponse.SerializeToString,
            ),
            'ProcessSensorData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessSensorData,
                    request_deserializer=load__balancer__pb2.SensorDataRequest.FromString,
                    response_serializer=load__balancer__pb2.SensorDataResponse.SerializeToString,
            ),
            'GetConnectedClients': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectedClients,
                    request_deserializer=load__balancer__pb2.Empty.FromString,
                    response_serializer=load__balancer__pb2.ConnectedClientsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'loadbalancer.LoadBalancer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('loadbalancer.LoadBalancer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoadBalancer(object):
    """Service for load balancer communication
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/RegisterClient',
            load__balancer__pb2.ClientInfo.SerializeToString,
            load__balancer__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemSpecs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/GetSystemSpecs',
            load__balancer__pb2.Empty.SerializeToString,
            load__balancer__pb2.SystemSpecs.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/SubmitTask',
            load__balancer__pb2.Task.SerializeToString,
            load__balancer__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/GetTaskStatus',
            load__balancer__pb2.TaskStatusRequest.SerializeToString,
            load__balancer__pb2.TaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/HealthCheck',
            load__balancer__pb2.Empty.SerializeToString,
            load__balancer__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeployModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/DeployModel',
            load__balancer__pb2.ModelDeploymentRequest.SerializeToString,
            load__balancer__pb2.ModelDeploymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/GetAvailableModels',
            load__balancer__pb2.Empty.SerializeToString,
            load__balancer__pb2.AvailableModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessAIRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/ProcessAIRequest',
            load__balancer__pb2.AIRequest.SerializeToString,
            load__balancer__pb2.AIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeployContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/DeployContainer',
            load__balancer__pb2.ContainerDeploymentRequest.SerializeToString,
            load__balancer__pb2.ContainerDeploymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetContainerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/GetContainerStatus',
            load__balancer__pb2.ContainerStatusRequest.SerializeToString,
            load__balancer__pb2.ContainerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/StopContainer',
            load__balancer__pb2.ContainerStopRequest.SerializeToString,
            load__balancer__pb2.ContainerStopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessSensorData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/ProcessSensorData',
            load__balancer__pb2.SensorDataRequest.SerializeToString,
            load__balancer__pb2.SensorDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConnectedClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/loadbalancer.LoadBalancer/GetConnectedClients',
            load__balancer__pb2.Empty.SerializeToString,
            load__balancer__pb2.ConnectedClientsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
